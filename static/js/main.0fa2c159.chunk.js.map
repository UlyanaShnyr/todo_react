{"version":3,"sources":["TodoForm.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","state","text","handleChange","event","_this","setState","Object","defineProperty","target","name","value","handleSubmit","preventDefault","props","onSubmit","id","shortid","generate","complite","react_default","a","createElement","this","onChange","placeholder","Component","Todo","style","display","justifyContent","paddingTop","textDecoration","todo","paddingRight","fontSize","width","onClick","selectTab","deleteTodo","backgroundColor","borderWidth","color","TodoList","todos","showFilter","addTodo","concat","toConsumableArray","map","updateShowFilter","filterName","handleDeleteTodo","filter","clearCompleted","_this2","src_TodoForm","key","showAll","handleShowAll","length","class","App","className","src_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0fa2c159.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport shortid from 'shortid';\r\n\r\nclass TodoForm extends Component {\r\n  state={\r\n      text:''\r\n  }\r\n\r\n  handleChange=(event)=>{\r\n    this.setState({\r\n    [event.target.name]:event.target.value\r\n    })    \r\n  }\r\n\r\n  handleSubmit=(event)=>{\r\n  event.preventDefault();\r\n    this.props.onSubmit({  \r\n        id:shortid.generate() ,     \r\n        text:this.state.text,\r\n        complite:false\r\n    });\r\n   \r\n    \r\n    this.setState({\r\n        text:\" \"\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n    <form onSubmit={this.handleSubmit}>        \r\n        <input         \r\n         name=\"text\"\r\n         value={this.state.text} \r\n         onChange={this.handleChange}\r\n         placeholder=\"What needs to be done?\"\r\n        >\r\n        </input>\r\n     </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoForm;","import React from 'react';\r\nexport default(props)=>(\r\n\r\n<div style={{display:\"flex\", justifyContent:\"center\",paddingTop:20}}>\r\n\r\n\r\n<div style={{ textDecoration: props.todo.complite ? \"line-through\":\"\", paddingRight:60, fontSize:20,width:\"80%\", }} \r\nonClick={props.selectTab}>\r\n    {props.todo.text}\r\n</div>\r\n<button onClick={props.deleteTodo} style={{backgroundColor: 'transparent', borderWidth: 0,fontSize:20, color:'red', width:\"20%\"}}>x</button>\r\n</div>\r\n)","import React, { Component } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\nclass TodoList extends Component {\r\n  state={\r\n      todos:[],\r\n      showFilter:'all'\r\n  }\r\n\r\n  addTodo=(todo)=>{     \r\n      this.setState({\r\n      todos:[todo, ...this.state.todos]\r\n      })\r\n  }\r\n  selectTab=(id)=>{\r\n    this.setState({\r\n      todos:this.state.todos.map(todo=>{\r\n        if(todo.id===id){\r\n          \r\n          return{\r\n           \r\n            id:todo.id,\r\n            text:todo.text,\r\n            complite:!todo.complite\r\n          };\r\n\r\n        }else{\r\n         \r\n          return todo;\r\n        };\r\n      })\r\n      })\r\n  };\r\n  updateShowFilter=(filterName)=>{\r\n    this.setState({           \r\n      showFilter:filterName,     \r\n    })\r\n  }\r\n\r\n  handleDeleteTodo=(id)=>{\r\n    this.setState({\r\n      todos:this.state.todos.filter(todo=>todo.id!==id)\r\n    })\r\n    \r\n  }\r\n\r\n  clearCompleted=()=>{\r\n    this.setState({\r\n      todos:this.state.todos.filter(todo=>!todo.complite)\r\n    })\r\n    \r\n  }\r\n  render() {  \r\n    let todos=[];\r\n    \r\n    if(this.state.showFilter==='all') {\r\n      this.state={\r\n        todos:this.state.todos\r\n      }\r\n       \r\n      \r\n   \r\n    }else if(this.state.showFilter==='active'){\r\n      this.state={\r\n        todos:this.state.todos.filter(todo=>!todo.complite),\r\n        \r\n    }\r\n     \r\n      \r\n    }\r\n    else if(this.state.showFilter==='completed'){\r\n      this.state={\r\n        todos:this.state.todos.filter(todo=>todo.complite)\r\n      }\r\n   \r\n     \r\n    }\r\n    return (\r\n      <div>  \r\n        <TodoForm onSubmit={this.addTodo}/>\r\n        {this.state.todos.map(todo=>(\r\n\r\n          <Todo \r\n          key={todo.id}\r\n          todo={todo}\r\n          selectTab={()=>this.selectTab(todo.id)}\r\n          deleteTodo={()=>this.handleDeleteTodo(todo.id)}\r\n          showAll={()=>this.handleShowAll()}\r\n          />  \r\n        ))}\r\n        <hr style={{width:160, borderWidth: 0.3}}/>\r\n        <div >\r\n          {this.state.todos.filter(todo=>!todo.complite).length} items left \r\n                \r\n        </div>\r\n        <div>\r\n        <button class=\"button\" onClick={()=>this.updateShowFilter(\"all\")} >All</button>\r\n        <button class=\"button\" onClick={()=>this.updateShowFilter(\"active\")} >Active</button>\r\n        <button class=\"button\" onClick={()=>this.updateShowFilter(\"completed\")}>Completed</button> \r\n        {this.state.todos.filter(todo=>todo.complite).length?\r\n        <button class=\"button\" onClick={()=>this.clearCompleted()}>Clear completed</button>:\r\n        null }\r\n        </div>\r\n     \r\n         \r\n          \r\n         \r\n         \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;","import React, { Component } from 'react';\nimport TodoList from './TodoList';\n\nimport './App.css';\nimport TodoForm from './TodoForm';\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div className=\"App\">\n     <h1>todos</h1>\n     <TodoList />    \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}